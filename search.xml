<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用python + selenium实现浏览器自动登录]]></title>
    <url>%2F2017%2F08%2F28%2F%E4%BD%BF%E7%94%A8python-%2B-selenium%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[使用python + selenium实现浏览器自动登录 python版本为3.6.2 系统为windows10 记录自己学习的心得，也是为了防止以后时间久了自己也遗忘了 1.安装selinium 安装的过程十分简单，只需要使用pip安装即可1pip install selenium 2.安装对应的webdriver（驱动）本文以edge浏览器为例子百度edge webdriver，搜索完第一个就是微软的官网了。这里附上链接:WebDriver如下图：选择对应的版本,这里十分重要!!版本可以通过windows的运行快速查看1dxdiag 如下图： 下载完毕之后，将MicrosoftWebDriver.exe复制到python安装目录下的scripts文件夹里面。至此安装环境配置完毕，开始实战。 3.实战 首先在python中导入selenium的webdriver的库from selenium import webdriver 实例化出一个浏览器browser = webdriver.Edge() 打开网址需要使用get方法，我们在这里以小米官网为例子browser.get(&quot;https://account.xiaomi.com/pass/serviceLogin?callback=https%3A%2F%2Forder.mi.com%2Flogin%2Fcallback%3Ffollowup%3Dhttps%253A%252F%252Fwww.mi.com%252F%26sign%3DNzY3MDk1YzczNmUwMGM4ODAxOWE0NjRiNTU5ZGQyMzFhYjFmOGU0Nw%2C%2C&amp;sid=mi_eshop&amp;_bannerBiz=mistore&amp;_qrsize=180&quot;)我们可以试着运行代码，可以看到浏览器已经自动打开小米官网了 获取元素元素的方法有很多种： find_element_by_idfind_element_by_namefind_element_by_xpathfind_element_by_link_textfind_element_by_partial_link_textfind_element_by_tag_namefind_element_by_class_namefind_element_by_css_selector 在这方面网上有很多资料首先我们要定位到一个元素，在这里我们可以用浏览器自带的工具右键登录按钮，点击检查元素，如图： 我们就可以定位到元素了 可以查看到他有着name属性，id属性定位元素的方法多种多样，没有规定一定要用哪一种，适合即可。123name = browser.find_element_by_name("user")#亦或者name = browser.find_element_by_id("username") 于是乎，我们已经定位到账号的输入框了。接下来是输入内容，输入内容可以使用send_keys的方法name.send_keys(&quot;hello&quot;)运行试试看，我们会发现已经成功在输入框中输入我们所要的内容。 同理我们可以定位到密码框passwd = browser.find_element_by_name(&quot;pwd&quot;) 以及往里面填充内容passwd.send_keys(&quot;hello&quot;)如下图所示： 输入完账号密码，最后一步便是点击登录按钮了 12login_button = browser.find_element_by_id("login-button")login_button.click() 运行试试，我们可以看到已经登录过了，当然账号密码是随便输入的。 最后附上代码：123456789101112from selenium import webdriverimport timebrowser = webdriver.Edge()browser.get("https://account.xiaomi.com/pass/serviceLogin?callback=https%3A%2F%2Forder.mi.com%2Flogin%2Fcallback%3Ffollowup%3Dhttps%253A%252F%252Fwww.mi.com%252F%26sign%3DNzY3MDk1YzczNmUwMGM4ODAxOWE0NjRiNTU5ZGQyMzFhYjFmOGU0Nw%2C%2C&amp;sid=mi_eshop&amp;_bannerBiz=mistore&amp;_qrsize=180")time.sleep(2)name = browser.find_element_by_name("user")name.send_keys("账号")passwd = browser.find_element_by_name("pwd")passwd.send_keys("密码")login_button = browser.find_element_by_id("login-button")login_button.click() 4.其它定位xpath定位 通常情况下，我们不一定能通过name或id定位,这时候我们可以用其它方法，通过xpath就是一种不错的选择，这里以百度的输入框为例。xpath可以通过谷歌浏览器或者其它浏览器直接查看，如图： 单击后即可复制,如下//*[@id=&quot;kw&quot;] 我们可以使用它path = browser.find_element_by_xpath(&quot;//*[@id=&#39;kw&#39;]&quot;) 记得将里面的双隐号改成单隐号，否则报错。可以试试是否定位到了path.send_keys(&quot;hello&quot;) 使用elements定位很多时候元素定位都很模糊，要定位到并不是十分容易，我们可以换个思路，同时定位一组元素，通过取下标的方法，读取元素，以百度的首页为例： 通过查看元素我们可以发现： 上面一组元素具有许多相同的特征，于是我们可以使用如下代码：123elements = browser.find_elements("css selector" , ".mnav")#或是elements = browser.find_elements_by_css_selector(".mnav") 两个定位是相同的，不过写法不同而已，这个方法和之前的区别主要就是find_elements，使用的是复数定位，最后通过下标来选择元素。1elements[0].click() 这样便是点击第一个元素，也就是新闻的按钮。附上测试代码: 5.终 selenium的资料网上很多，遇到问题善用搜索引擎，一般问题都可以得到解决。 大坑这里要特别说明一点，在测试时，浏览器的缩放比例不能调，不能调，不能调。这真的是一个大坑，我当时电脑的缩放比例是125%,定位元素始终不能成功，一直会提示：困扰了我好久，查阅好多资料始终不得解，偶然之下将缩放比例调回100%，终于解决这个问题，这也是我目前遇到最大的坑，在此特别记录，以防自己以后忘记。 最后附上我学习时的参考资料： Selenium2+python自动化45-18种定位方法Python爬虫利器五之Selenium的用法]]></content>
      <categories>
        <category>python记录</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>编程</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
